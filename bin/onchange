#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long ();
use Pod::Usage   ();
use File::ChangeNotify;
use Cwd          ();
use Config::Tiny ();

Getopt::Long::GetOptions(
    \my %opt,
    'run=s@',
    'help',
) or Pod::Usage::pod2usage( -exitval => 1 );

if ($opt{help}) {
    Pod::Usage::pod2usage( -exitval => 0 );
}

unless ($opt{run}) {
    Pod::Usage::pod2usage( -message => 'Option run is required', -exitval => 1 );
}

my $dir    = Cwd::getcwd();
my $config = load_config($dir);

my $commands = [];
foreach my $key (@{$opt{run}}) {
    Pod::Usage::pod2usage( -message => "Argument $key is not a defined command or set", -exitval => 1 )
        unless ( defined $config->{command}{$key} || defined $config->{set}{$key} );

    if ( defined $config->{command}{$key} ) {
        push @{$commands}, { $key => $config->{command}{$key} };
    }

    if ( defined $config->{set}{$key} ) {
        my $string = $config->{set}{$key};
        $string =~ s/\s+//g;
        push @{$commands},
            map +( { $_ => $config->{command}{$_} } ),
            extract_list($string);
    }
}

my $dir_exclude = $dir . "/(?:.+\/)?";
my $exclude = [
    qr($dir_exclude\.),  # dotfiles or dot directory names
    sub { -e && !-r },
];

foreach my $key ( keys %{$config->{ignore}} ) {
    my $string = $config->{ignore}{$key};
    $string =~ s/\s+//g;
    logger( "ignore", $string );

    push @{$exclude},
        map { qr($dir_exclude$_) }
        extract_list($string);
}

my $watcher =
    File::ChangeNotify->instantiate_watcher(
        directories => [ $dir ],
        exclude     => $exclude,
        follow_symlinks => 0,
    );

logger( 'watch', $dir );

while ( my @events = $watcher->wait_for_events ) {
    logger( $events[0]->{type}, $events[0]->{path} );
    run_commands($commands);
}

exit 0;

sub extract_list {
    my $string = shift;

    return ( $string =~ /,/ ? split /,/, $string : $string );
}

sub logger {
    my $event = shift;
    my $entry = shift;

    if ( $event eq 'fatal' ) {
        die "[" . time . "][$event]: " . "$entry\n";
    }
    else {
        print "[" . time . "][$event]: " . "$entry\n";
    }

    return;
}

sub load_config {
    my $dir = shift;
    my $rc  = "$dir/.onchange";

    unless ( -e $rc && -r $rc ) {
        logger( "fatal", "$rc does not exist or cannot be read" );
    }

    my $config = Config::Tiny->read($rc);

    foreach my $required (qw{ command }) {
        unless ( defined $config->{$required} ) {
            logger( "fatal", "$required section in $rc is required" );
        }
    }

    foreach my $set ( keys %{$config->{set}} ) {
        my $string = $config->{set}{$set};
        $string =~ s/\s+//g;

        foreach my $command ( extract_list($string) ) {
            unless ( defined $config->{command}{$command} ) {
                logger( "fatal", "set '$set' defines a nonexistent command, '$command'" );
            }
        }
    }

    return $config;
}

sub run_commands {
    my $commands = shift;

    foreach my $command (@{$commands}) {
        my $key     = ( keys %{$command} )[0];
        my $command = ( values %{$command} )[0];

        logger( "run $key", $command );
        system($command);
        logger( "fatal", "run $key failed; exiting" ) if $?;
    }

    return;
}

__END__

=pod

=head1 NAME

onchange - run commands when files change

=head1 SYNOPSIS

 onchange [--run <command|set>]
          [--help]

=head1 DESCRIPTION

C<onchange> is a program that watches for changes to files and directories
then runs configured commands.

C<onchange> detects changes recursively within the current working directory.
Files/directories to ignore and commands to run are read from the C<.onchange>
file within the current working directory.

=head1 OPTIONS

=over

=item --run <command|set>

Defines which command or set to run on changes.

The C<command> or C<set> specified must be defined in the C<.onchange> configuration file.

Multiple C<--run> options may be defined and are run in the order they're passed.

=item --help

Print the help menu.

=back

=head1 CONFIGURATION

=head2 ignore

The C<ignore> section key.

Keys within this section define additional file or directory names to
ignore.

Multiple file or directory names can be defined per line if separated by
comma.

 [ignore]
 dirs=tmp, t
 files=scratch, testing

=head2 command

The C<command> section key.

Keys within this section define what command to run when that command
argument is passed.

 [command]
 example=echo 'this is an example command'
 another_example=echo 'this is another example command'

Defined commands are run as arguments to C<onchange>. Multiple commands are
run in the order they're passed.

 $ onchange --run example --run another_example
 (will run example, then another_example)

=head2 set

The C<set> section key.

Keys within this section define sets of commands to run when that set
argument is passed.

 [command]
 example=echo 'this is an example command'
 another_example=echo 'this is another example command'
 yet_another_example=echo 'this is not included in set examples'

 [set]
 examples=example, another_example

Multiple commands can be defined per line if separated by comma.

Defined commands are run as arguments to C<onchange>. Multiple commands are
run in the order they're passed.

 $ onchange --run examples --run yet_another_example
 (will run example, then another_example, then yet_another_example)

=head2 EXAMPLES

=head3 Run two specific commands when changes are detected

 # create a .onchange file in the directory to watch
 ~/git/example $ vi .onchange
 [ignore]
 dirs=tmp, t
 files=scratch, testing

 [command]
 example=echo 'this is an example command'
 another_example=echo 'this is another example command'
 yet_another_example=echo 'this is not included in set examples'

 [set]
 examples=example, another_example

 # run onchange, specifying both commands to run as defined in the .onchange file
 ~/git/example $ onchange --run example --run another_example
 [1617588530][ignore]: scratch,testing
 [1617588530][ignore]: tmp,t
 [1617588530][watch]: /home/blaine/git/example

 # when any non-ignored files or directories change (or new are created),
 # each of the specified commands are run (but not the yet_another_example command)

 [1617588661][modify]: /home/blaine/git/example/lib/example.pm
 [1617588661][run example]: echo 'this is an example command'
 this is an example command
 [1617588661][run another_example]: echo 'this is another example command'
 this is another example command
 [1617588707][create]: /home/blaine/git/example/puppies
 [1617588707][run example]: echo 'this is an example command'
 this is an example command
 [1617588707][run another_example]: echo 'this is another example command'
 this is another example command

=head3 Run a set of commands and one specific command when changes are detected

 # with the following commands and set in the .onchange file
 [command]
 example=echo 'this is an example command'
 another_example=echo 'this is another example command'
 yet_another_example=echo 'this is not included in set examples'

 [set]
 examples=example, another_example

 # run onchange, specifying the set and additional command to run
 ~/git/example $ onchange --run examples --run yet_another_example
 (will run example, then another_example, then yet_another_example)

=cut
